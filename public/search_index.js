var documenterSearchIndex = {"docs":
[{"location":"acwutil/","page":"AC Wavelet Utils","title":"AC Wavelet Utils","text":"CurrentModule = AutocorrelationShell\nDocTestSetup = quote\n  using AutocorrelationShell\nend","category":"page"},{"location":"acwutil/","page":"AC Wavelet Utils","title":"AC Wavelet Utils","text":"make_noisy(x::AbstractArray{<:Number}, rng::MersenneTwister, a::Float64)\n\nsnr(f::AbstractArray{T}, g::AbstractArray{T}) where T<:Number\n\nacthreshold(x::AbstractArray{<:Number}, type::AbstractString, t::Float64)\n\nget_snr(y::AbstractArray{T}, x::AbstractArray{T}; type::AbstractString=\"hard\", step::Float64=0.5) where T<:Number\n\nget_ssim(y::AbstractArray{T}, x::AbstractArray{T}; type::AbstractString=\"hard\", step::Float64=0.5) where T<:Number\n\nacwt_heatmap(x::AbstractArray{<:Number})\n\nwiggle(wav; taxis=1:size(wav,1), zaxis=1:size(wav,2), sc=1, EdgeColor=:black, FaceColor=:black, Overlap=true, Orient=:across, ZDir=:normal)\n\nwiggle!(wav; taxis=1:size(wav,1), zaxis=1:size(wav,2), sc=1, EdgeColor=:black, FaceColor=:black, Overlap=true, Orient=:across, ZDir=:normal)","category":"page"},{"location":"acwutil/#AutocorrelationShell.make_noisy-Tuple{AbstractArray{#s1,N} where N where #s1<:Number,Random.MersenneTwister,Float64}","page":"AC Wavelet Utils","title":"AutocorrelationShell.make_noisy","text":"make_noisy(x::AbstractArray{<:Number}, rng::MersenneTwister, a::Float64)\n\nAdds gaussian white noise to an image.\n\nArguments\n\nx::AbstractArray{<:Number}: image rng::MersenneTwister: random number generator ex) rng = MersenneTwister(123) a::Float64: A scaling parameter to adjust level of noise.\n\nExample\n\nusing AutocorrelationShell, Images, FileIO, Random\n\n# Load test image\nimg = load(\"./test/pictures/boat.jpg\")\nimg = Float64.(Gray.(img))\n\nrng = MersenneTwister(123)\nnoisy_image = make_noisy(img, rng, 0.7)\n\n\n\n\n\n","category":"method"},{"location":"acwutil/#AutocorrelationShell.snr-Union{Tuple{T}, Tuple{AbstractArray{T,N} where N,AbstractArray{T,N} where N}} where T<:Number","page":"AC Wavelet Utils","title":"AutocorrelationShell.snr","text":"snr(f::AbstractArray{T}, g::AbstractArray{T}) where T<:Number\n\nComputes the signal to noise ratio between two signals. Returns signal to noise ratio(dB).\n\nArguments\n\nf::AbstractArray{<:Number}: Original signal g::AbstractArray{<:Number}: Noisy signal\n\n\n\n\n\n","category":"method"},{"location":"acwutil/#AutocorrelationShell.acthreshold-Tuple{AbstractArray{#s1,N} where N where #s1<:Number,AbstractString,Float64}","page":"AC Wavelet Utils","title":"AutocorrelationShell.acthreshold","text":"acthreshold(x::AbstractArray{<:Number}, type::AbstractString, t::Float64)\n\nThresholds a given array of coeffecients using either hard thresholding or soft thresholding.\n\nArguments\n\nx::AbstractArray{<:Number}: Autocorrelation wavelet coefficient array\ntype::AbstractString: Threshold type. \"hard\" or \"soft\"\nt::Float64: threshold value\n\n\n\n\n\n","category":"method"},{"location":"acwutil/#AutocorrelationShell.get_snr-Union{Tuple{T}, Tuple{AbstractArray{T,N} where N,AbstractArray{T,N} where N}} where T<:Number","page":"AC Wavelet Utils","title":"AutocorrelationShell.get_snr","text":"get_snr(y::AbstractArray{T}, x::AbstractArray{T}; type::AbstractString=\"hard\", step::Float64=0.5) where T<:Number\n\nThresholds the wavelet coefficients matrix of a noisy signal, reconstructs it, then computes the signal to noise ratio between the reconstructed signal and the original non-noisy signal. Returns a list of the ratio of non-zero coefficient at each threshold and a list containing the signal to noise ratio.\n\nArguments\n\ny: original 2D signal\nx: wavelet coefficient matrix of a noisy 2D signal\ntype: type of thresholding (soft or hard)\nstep: step at which to increase the threshold\n\nExample\n\nimg = load(\"./test/pictures/lenna.jpg\")\nimg = Float64.(Gray.(img))\n\n# Add noise to image\nrng = MersenneTwister(123)\nnoisy = make_noisy(img, rng, 0.7)\n\n# Apply Wavelet transform\nH = wavelet(WT.db2)\nL = 2\nQ = qfilter(H)\nP = pfilter(H)\n\nac_noisy = ac2d(noisy, L, P, Q)\n\ncoef_ratio, snr_list = get_snr(img, ac_noisy, type=\"soft\", step=0.5)\n\n\n\n\n\n","category":"method"},{"location":"acwutil/#AutocorrelationShell.get_ssim-Union{Tuple{T}, Tuple{AbstractArray{T,N} where N,AbstractArray{T,N} where N}} where T<:Number","page":"AC Wavelet Utils","title":"AutocorrelationShell.get_ssim","text":"get_ssim(y::AbstractArray{T}, x::AbstractArray{T}; type::AbstractString=\"hard\", step::Float64=0.5) where T<:Number\n\nThresholds the wavelet coefficients matrix of a noisy signal, reconstructs it, then computes the structural similarity index between the reconstructed signal and the original non-noisy signal. Returns a list of the ratio of non-zero coefficient at each threshold and a list containing the SSIM values.\n\nArguments\n\ny: original 2D signal\nx: wavelet coefficient matrix of a noisy 2D signal\ntype: type of thresholding (soft or hard)\nstep: step at which to increase the threshold\n\nExample\n\nusing AutocorrelationShell, Wavelets, FileIO, Images, ImageQualityIndexes, Random\n\nimg = load(\"./test/pictures/lenna.jpg\")\nimg = Float64.(Gray.(img))\n\n# Add noise to image\nrng = MersenneTwister(123)\nnoisy = make_noisy(img, rng, 0.7)\n\n# Apply Wavelet transform\nH = wavelet(WT.db2)\nL = 2\nQ = qfilter(H)\nP = pfilter(H)\n\nac_noisy = acwt2d(noisy; L=2, P=P, Q=Q)\n\ncoef_ratios, ssim_values = get_ssim(img, ac_noisy; type=\"hard\", step=0.5)\n\n\n\n\n\n","category":"method"},{"location":"acwutil/#AutocorrelationShell.acwt_heatmap-Tuple{AbstractArray{#s1,N} where N where #s1<:Number}","page":"AC Wavelet Utils","title":"AutocorrelationShell.acwt_heatmap","text":"acwt_heatmap(x::AbstractArray{<:Number})\n\nTakes the natural log of the absolute value of each cell, and plots a heatmap. Can be used for visualizing an input image or the coefficient matrix of a 2D ACW decomposition.\n\nArguments\n\nx::AbstractArray{<:Number}: A image or a 2D matrix\n\n\n\n\n\n","category":"method"},{"location":"acwutil/#AutocorrelationShell.wiggle-Tuple{Any}","page":"AC Wavelet Utils","title":"AutocorrelationShell.wiggle","text":"wiggle(wav; taxis=1:size(wav,1), zaxis=1:size(wav,2), sc=1, EdgeColor=:black, FaceColor=:black, Orient=:across, Overlap=true, ZDir=:normal)\n\nPlot a set of shaded wiggles\n\nArguments\n\nwav::Array: matrix of waveform columns.\ntaxis::Array=1:size(wav,1): time axis vector\nzaxis::Array=1:size(wav,2): space axis vector\nsc::Float=1: scale factor/magnification.\nEdgeColor::Symbol=:black: Sets edge of wiggles color.\nFaceColor::Symbol=:black: Sets shading color of wiggles.\nOverlap::bool=true: How signals are scaled.       true  - Signals overlap (default);       false - Signals are scaled so they do not overlap.\nOrient::Symbol=:across: Controls orientation of wiggles.       :across - from left to right       :down   - from top to down\nZDir::Symbol=:normal: Direction of space axis.       :normal  - First signal at bottom (default)       :reverse - First signal at top.\n\nTranslated by Nicholas Hausch – MATLAB file provided by Naoki Saito The previous MATLAB version contributors are:  Anthony K. Booer (SLB) and Bradley Marchand (NSWC-PC) Revised by Naoki Saito, Feb. 05, 2018\n\n\n\n\n\n","category":"method"},{"location":"acwutil/#AutocorrelationShell.wiggle!-Tuple{Any}","page":"AC Wavelet Utils","title":"AutocorrelationShell.wiggle!","text":"wiggle!(wav; taxis=1:size(wav,1), zaxis=1:size(wav,2), sc=1, EdgeColor=:black, FaceColor=:black, Orient=:across, Overlap=true, ZDir=:normal)\n\nPlot a set of shaded wiggles on the current displayed graphics\n\nArguments\n\nwav::Array: matrix of waveform columns.\ntaxis::Array=1:size(wav,1): time axis vector\nzaxis::Array=1:size(wav,2): space axis vector\nsc::Float=1: scale factor/magnification.\nEdgeColor::Symbol=:black: Sets edge of wiggles color.\nFaceColor::Symbol=:black: Sets shading color of wiggles.\nOverlap::bool=true: How signals are scaled.       true  - Signals overlap (default);       false - Signals are scaled so they do not overlap.\nOrient::Symbol=:across: Controls orientation of wiggles.       :across - from left to right       :down   - from top to down\nZDir::Symbol=:normal: Direction of space axis.       :normal  - First signal at bottom (default)       :reverse - First signal at top.\n\nTranslated by Nicholas Hausch – MATLAB file provided by Naoki Saito The previous MATLAB version contributors are:  Anthony K. Booer (SLB) and Bradley Marchand (NSWC-PC) Revised by Naoki Saito, Feb. 05, 2018\n\n\n\n\n\n","category":"method"},{"location":"acw2d/","page":"AC Wavelet 2D","title":"AC Wavelet 2D","text":"CurrentModule = AutocorrelationShell\nDocTestSetup = quote\n  using AutocorrelationShell\nend","category":"page"},{"location":"acw2d/","page":"AC Wavelet 2D","title":"AC Wavelet 2D","text":"ac2d(x::AbstractArray{T,2}, L_row::Integer, L_col::Integer, P::Vector{T}, Q::Vector{T}) where T<:Number\n\nacwt2D(x::AbstractArray; L_row::Integer=1, L_col::Integer=1, P::Vector{T}, Q::Vector{T}) where T<:Number\n\niacwt2D(x::AbstractArray{<:Number})","category":"page"},{"location":"acw2d/#AutocorrelationShell.ac2d-Union{Tuple{T}, Tuple{AbstractArray{T,2},Integer,Integer,Array{T,1},Array{T,1}}} where T<:Number","page":"AC Wavelet 2D","title":"AutocorrelationShell.ac2d","text":"ac2d(x, Lrow, Lcol, P, Q)\n\nComputes autocorrelation wavelet coeficients for 2D signals. Returns a tensor (numrows, numcols, levelsofdecomp, levelsofdecomp) that stores the coefficients of the decomposed signal.\n\nArguments\n\nx: 2D signals (n ,m) matrix\nL_row: Decomposition level of rows\nL_col: Decomposition level of columns\nP: Low AC shell filter\nQ: High AC shell filter\n\n\n\n\n\n","category":"method"},{"location":"acw2d/#AutocorrelationShell.acwt2D-Union{Tuple{AbstractArray}, Tuple{T}} where T<:Number","page":"AC Wavelet 2D","title":"AutocorrelationShell.acwt2D","text":"acwt2d(x; Lrow, Lcol, P, Q)\n\nComputes autocorrelation wavelet coeficients for 2D signals. Wrapper for ac2d. Returns a the tensor of (numrows, numcols, levelsofdecomp, levelsofdecomp) that stores the coefficients of the decomposed signal. Wrapper for the ac2d function.\n\nArguments\n\nx: 2D signals (n ,m) matrix.\nL_row: Decomposition level of rows. default: 1\nL_col: Decomposition level of columns. default: 1\nP: Low AC shell filter.\nQ: High AC shell filter.\n\n\n\n\n\n","category":"method"},{"location":"acw2d/#AutocorrelationShell.iacwt2D-Tuple{AbstractArray{#s1,N} where N where #s1<:Number}","page":"AC Wavelet 2D","title":"AutocorrelationShell.iacwt2D","text":"iacwt2D(x)\n\nPerforms the inverse 2D autocorrelation wavelet transform.\n\nArguments\n\nx::AbstractArray{<:Number}: acwt2D function output\n\n\n\n\n\n","category":"method"},{"location":"getting_started/#Getting-Started","page":"Getting Started","title":"Getting Started","text":"","category":"section"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"In this section we will provide a condensed overview of the package. In order to keep this overview concise, we will not discuss any background information or theory here in detail.","category":"page"},{"location":"getting_started/#Installation","page":"Getting Started","title":"Installation","text":"","category":"section"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"To install AutocorrelationShell.jl, start up Julia and type the following code-snipped into the REPL. It makes use of the native Julia package manger.","category":"page"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"Pkg.add(\"AutocorrelationShell\")","category":"page"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"Additionally, for example if you encounter any sudden issues, or in the case you would like to contribute to the package, you can manually choose to be on the latest (untagged) version.","category":"page"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"Pkg.checkout(\"AutocorrelationShell\")","category":"page"},{"location":"getting_started/#Examples","page":"Getting Started","title":"Examples","text":"","category":"section"},{"location":"getting_started/#D-Autocorrelation-Wavelet-Transform","page":"Getting Started","title":"1D Autocorrelation Wavelet Transform","text":"","category":"section"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"The following code snippet shows how to obtain the autocorrelation wavelet decomposition of a 1D signal.","category":"page"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"using AutocorrelationShell, Wavlets, Plots\n\nH = wavelet(WT.db2)\nL = 2\nQ = qfilter(H)\nP = pfilter(H)\n\nx = zeros(256)\nx[128] = 1\n\ndecomposition = acwt(x, L=2, P=P, Q=Q)\n\nwiggle(decomposition, Overlap = false)","category":"page"},{"location":"getting_started/#D-Autocorrelation-Wavelet-Transform-2","page":"Getting Started","title":"2D Autocorrelation Wavelet Transform","text":"","category":"section"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"acwt2D(x; L_row, L_col, P, Q)","category":"page"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"The acwt2D function performs a forward wavelet transformation on 2D signals such as images. It returns a 4 dimensional tensor with the dimensions (numrow, numcol, levelsofdecomprow, levelsofdecompcol).","category":"page"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"iacwt2D(x)","category":"page"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"The iacwt2D function is the inverse function of acwt2D. It takes the output of acwt2D(i.e. the wavelet coefficient matrix) and reconstructs the original signal.","category":"page"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"The following code snippet shows how to obtain the autocorrelation wavelet decomposition of an image.","category":"page"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"H = wavelet(WT.db2)\nQ = qfilter(H)\nP = pfilter(H)\n\nimg = load(../test/pictures/boat.jpg)\nimg = Float64.(Gray.(img))\n\ndecomposition = acwt2D(img, L_row=2, L_col=2, P=P, Q=Q)\n\n# Display the 6th row and column decomposition\nacwt_heatmap(decomposition[:,:,6,6])\n\n# Revert to original signal\nreconstruct = iacwt2D(decomposition)","category":"page"},{"location":"getting_started/#D-Autocorrelation-Wavelet-Packet-Transform","page":"Getting Started","title":"1D Autocorrelation Wavelet Packet Transform","text":"","category":"section"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"acwpt(x, P, Q)","category":"page"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"The acwpt function computes the autocorrelation wavelet packet transform for 1 dimensional signal. It returns a binary tree object where the root node contains the original signal, and each child node contains a vector of 1 dimensional autocorrelation wavelet transform coefficients.","category":"page"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"The following code snippet shows how to obtain the autocorrelation wavelet packet transformation of a 1D signal.","category":"page"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"using Random, Wavelets, AbstractTrees\nrng = MersenneTwister(123);\n\nX₁ = randn(rng, 4); # length 4 random signal\nH = wavelet(WT.db2);\nQ = qfilter(H);\nP = pfilter(H);\ndecomp = acwpt(X₁, P, Q)\n\n# Print the tree in the console\nprint_tree(decomp)\n\n# Gather all nodes into a vector\ncollect(PostOrderDFS(decomp))","category":"page"},{"location":"getting_started/#Getting-Help","page":"Getting Started","title":"Getting Help","text":"","category":"section"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"To get help on specific functionality you can either look up the information here, or if you prefer you can make use of Julia's native doc-system.","category":"page"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"If you encounter a bug or would like to participate in the development of this package come find us on GitLab.","category":"page"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"BoundaryValueProblems/AutocorrelationShell.jl","category":"page"},{"location":"acwpt/","page":"AC Wavelet Packets","title":"AC Wavelet Packets","text":"CurrentModule = AutocorrelationShell\nDocTestSetup = quote\n  using AutocorrelationShell\nend","category":"page"},{"location":"acwpt/","page":"AC Wavelet Packets","title":"AC Wavelet Packets","text":"acwpt(x::Vector{T}, P::Vector{T}, Q::Vector{T}) where T<:Real\n\naciwpt(tree::BinaryNode)\n\nacwptBestBasisTree(node::BinaryNode; direction::AbstractString=\"right\", et::Wavelets.Entropy=NormEntropy())","category":"page"},{"location":"acwpt/#AutocorrelationShell.acwpt-Union{Tuple{T}, Tuple{Array{T,1},Array{T,1},Array{T,1}}} where T<:Real","page":"AC Wavelet Packets","title":"AutocorrelationShell.acwpt","text":"acwpt(x, P, Q)\n\nCompute the autocorrelation wavelet packet transform for a given signal. Returns a binary tree object.\n\nArguments\n\nx::Vector{<:Real}: 1 dimensional signal.\nP::Vector{<:Real}: Low autocorrelation shell filter.\nQ::Vector{<:Real}: High autocorrelation shell filter.\n\n\n\n\n\n","category":"method"},{"location":"acwpt/#AutocorrelationShell.aciwpt-Tuple{BinaryNode}","page":"AC Wavelet Packets","title":"AutocorrelationShell.aciwpt","text":"aciwpt(tree)\n\nReconstructs the signal using the autocorrelation wavelet packet trasform bases.\n\nArguments\n\ntree::BinaryNode: The root node of the wavelet packet tree (binary tree)\n\n\n\n\n\n","category":"method"},{"location":"acwpt/#AutocorrelationShell.acwptBestBasisTree-Tuple{BinaryNode}","page":"AC Wavelet Packets","title":"AutocorrelationShell.acwptBestBasisTree","text":"acwptBestBasisTree(node; direction, et)\n\nFinds the best set of basis using a given entropy criterion.\n\nArguments\n\nnode::BinaryNode: Root node of the wavelet packet tree (binary)\ndirection::AbstractString: Direction(left or right) of the node relative to its parent. default: \"right\"\net::Wavelets.Entropy: Entropy criterion used to determine the best tree.\n\n\n\n\n\n","category":"method"},{"location":"acw1d/","page":"AC Wavelet 1D","title":"AC Wavelet 1D","text":"CurrentModule = AutocorrelationShell\nDocTestSetup = quote\n  using AutocorrelationShell\nend","category":"page"},{"location":"acw1d/","page":"AC Wavelet 1D","title":"AC Wavelet 1D","text":"pfilter(filter::OrthoFilter)\n\nqfilter(filter::OrthoFilter)\n\nfwt_ac(x::Vector{T}, L::Integer, P::Vector{T}, Q::Vector{T}) where T<:Number\n\nacwt(x::Vector{T}; L::Integer=1, P::Vector{T}, Q::Vector{T}) where T<:Real\n\niacwt(acwt::AbstractArray{<:Number})","category":"page"},{"location":"acw1d/#AutocorrelationShell.pfilter-Tuple{Wavelets.WT.OrthoFilter}","page":"AC Wavelet 1D","title":"AutocorrelationShell.pfilter","text":"pfilter(filter::OrthoFilter)\n\nComputes the low AC filter.\n\nExample\n\nusing Wavelets\nH = wavelet(WT.db2)\nP = pfilter(H)\n\n\n\n\n\n","category":"method"},{"location":"acw1d/#AutocorrelationShell.qfilter-Tuple{Wavelets.WT.OrthoFilter}","page":"AC Wavelet 1D","title":"AutocorrelationShell.qfilter","text":"qfilter(filter::OrthoFilter)\n\nComputes the high AC filter.\n\nExample\n\nusing Wavelets\nH = wavelet(WT.db2)\nQ = qfilter(H)\n\n\n\n\n\n","category":"method"},{"location":"acw1d/#AutocorrelationShell.fwt_ac-Union{Tuple{T}, Tuple{Array{T,1},Integer,Array{T,1},Array{T,1}}} where T<:Number","page":"AC Wavelet 1D","title":"AutocorrelationShell.fwt_ac","text":"fwt_ac(x, L, P, Q)\n\nComputes the forward autocorrelation wavelet transform for a given signal.\n\nArguments\n\nx::Vector{<:Number}: Signal.\nL::Integer: Degree of coarsest scale.\nP::Vector{<:Number}: Low AC shell filter.\nQ::Vector{<:Number}: High AC shell filter.\n\n\n\n\n\n","category":"method"},{"location":"acw1d/#AutocorrelationShell.acwt-Union{Tuple{Array{T,1}}, Tuple{T}} where T<:Real","page":"AC Wavelet 1D","title":"AutocorrelationShell.acwt","text":"acwt(x; L, P, Q)\n\nComputes the forward autocorrelation wavelet transform. Wrapper for the fwt_ac function.\n\nArguments\n\nx::Vector{<:Real}: array to transform.\nL::Integer: degree of coarsest scale. default = 1.\nP::Vector{<:Real}: Low AC shell filter.\nQ::Vector{<:Real}: High AC shell filter.\n\nExample\n\nusing Wavelets\n\nH = wavelet(WT.db2)\nQ = qfilter(H)\nP = pfilter(H)\n\nx = zeros(256)\nx[128] = 1\n\ndecomp = acwt(x; P=P, Q=Q)\n\n\n\n\n\n","category":"method"},{"location":"acw1d/#AutocorrelationShell.iacwt-Tuple{AbstractArray{#s1,N} where N where #s1<:Number}","page":"AC Wavelet 1D","title":"AutocorrelationShell.iacwt","text":"iacwt(acwt)\n\nInverse autocorrelation wavelet transform(signal reconstruction). Wrapper for the iwt_ac function.\n\nArguments\n\nacwt::AbstractArray{<:Number}: Array of wavelet coefficients.\n\n\n\n\n\n","category":"method"},{"location":"#Introduction","page":"Home","title":"Introduction","text":"","category":"section"},{"location":"#Overview","page":"Home","title":"Overview","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"AutocorrelationShell is package for using autocorrelation wavelets in julia.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Signal representations using autocorrelation wavelets are redundant and non-orthogonal. Some desirable properties of autocorrelation wavelet transforms are symmetry without losing vanishing moments, edge detection and characterization capabilities, and shift invariance. Autocorrelation wavelets can be used as a tool for data analysis such as time series analysis and image analysis.","category":"page"},{"location":"","page":"Home","title":"Home","text":"The Autocorrelation Shell is heavily inspired by the paper Wavelets, their autocorrelation functions, and multiresolution representation of signals.","category":"page"},{"location":"#Installation","page":"Home","title":"Installation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"You can install the package at the Pkg REPL-mode with:","category":"page"},{"location":"","page":"Home","title":"Home","text":"(v1.0) pkg> add AutocorrelationShell","category":"page"},{"location":"#Highlights","page":"Home","title":"Highlights","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"1D autocorrelation wavelet transform.\n2D autocorrelation wavelet transform.\n1D autocorrelation wavelet packet transform.\nA variety of utility functions for image de-noising such as functions for Signal to Noise Ratio(SNR) and Structural Similarity Index(SSIM).\nThe package is completely documented.","category":"page"},{"location":"#Authors","page":"Home","title":"Authors","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"This package was authored by Rishi Subramanian, Christina Chang, and Shozen Dan under the supervision of Professor Naoki Saito at University of California, Davis.","category":"page"}]
}
