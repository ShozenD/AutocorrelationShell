var documenterSearchIndex = {"docs":
[{"location":"acwutil/","page":"-","title":"-","text":"CurrentModule = AutocorrelationShell\nDocTestSetup = quote\n  using AutocorrelationShell\nend","category":"page"},{"location":"acwutil/#Auto-correlation-Wavelets-Utilities","page":"-","title":"Auto-correlation Wavelets Utilities","text":"","category":"section"},{"location":"acwutil/","page":"-","title":"-","text":"AutocorrelationShell.jl contains functions that can be used for adding gaussian noise, computing signal to noise ratio, computing structural similarity index(SSIM), performing thresholding, visualizing matrix heat map, visualizing the decomposition of the 1D transform, or calculate the entropy of a vector.","category":"page"},{"location":"acwutil/","page":"-","title":"-","text":"make_noisy(x::AbstractArray{<:Number}, rng::MersenneTwister, a::Float64)\n\nsnr(f::AbstractArray{T}, g::AbstractArray{T}) where T<:Number\n\nacthreshold(x::AbstractArray{<:Number}, type::AbstractString, t::Float64)\n\nget_snr(y::AbstractArray{T, Integer}, x::AbstractArray{T, Integer}; type::AbstractString=\"hard\", step::Float64=0.5) where T<:Number\n\nget_ssim(y::AbstractArray{T}, x::AbstractArray{T}; type::AbstractString=\"hard\", step::Float64=0.5) where T<:Number\n\nacwt_heatmap(x::AbstractArray{<:Number})\n\nwentropy(x::AbstractArray{T}, et::Wavelets.Entropy, nrm::T=norm(x)) where T<:Number\n\nwiggle(wav; taxis=1:size(wav,1), zaxis=1:size(wav,2), sc=1, EdgeColor=:black, FaceColor=:black, Overlap=true, Orient=:across, ZDir=:normal)\n\nwiggle!(wav; taxis=1:size(wav,1), zaxis=1:size(wav,2), sc=1, EdgeColor=:black, FaceColor=:black, Overlap=true, Orient=:across, ZDir=:normal)","category":"page"},{"location":"acwutil/#AutocorrelationShell.ACPlots.wiggle!-Tuple{Any}","page":"-","title":"AutocorrelationShell.ACPlots.wiggle!","text":"wiggle!(wav; taxis=1:size(wav,1), zaxis=1:size(wav,2), sc=1, EdgeColor=:black, FaceColor=:black, Orient=:across, Overlap=true, ZDir=:normal)\n\nPlot a set of shaded wiggles on the current displayed graphics\n\nArguments\n\nwav::Array: matrix of waveform columns.\ntaxis::Array=1:size(wav,1): time axis vector\nzaxis::Array=1:size(wav,2): space axis vector\nsc::Float=1: scale factor/magnification.\nEdgeColor::Symbol=:black: Sets edge of wiggles color.\nFaceColor::Symbol=:black: Sets shading color of wiggles.\nOverlap::bool=true: How signals are scaled.       true  - Signals overlap (default);       false - Signals are scaled so they do not overlap.\nOrient::Symbol=:across: Controls orientation of wiggles.       :across - from left to right       :down   - from top to down\nZDir::Symbol=:normal: Direction of space axis.       :normal  - First signal at bottom (default)       :reverse - First signal at top.\n\nTranslated by Nicholas Hausch – MATLAB file provided by Naoki Saito The previous MATLAB version contributors are:  Anthony K. Booer (SLB) and Bradley Marchand (NSWC-PC) Revised by Naoki Saito, Feb. 05, 2018\n\n\n\n\n\n","category":"method"},{"location":"acw2d/","page":"AC Wavelet 2D","title":"AC Wavelet 2D","text":"CurrentModule = AutocorrelationShell\nDocTestSetup = quote\n  using AutocorrelationShell\nend","category":"page"},{"location":"acw2d/#D-Autocorrelation-Wavelets-Transform","page":"AC Wavelet 2D","title":"2D Autocorrelation Wavelets Transform","text":"","category":"section"},{"location":"acw2d/","page":"AC Wavelet 2D","title":"AC Wavelet 2D","text":"The 2D AC Wavelet transform will take a 2D signal such as an image and decompose it into wavelet coefficients. First, the row-wise coefficients will be computed using the 1D transform and then the column wise coefficients for each set of row-wise coefficients will be computed to create a 4 dimensional tensor.","category":"page"},{"location":"acw2d/#Forward-AC-Wavelet-Transform","page":"AC Wavelet 2D","title":"Forward AC Wavelet Transform","text":"","category":"section"},{"location":"acw2d/","page":"AC Wavelet 2D","title":"AC Wavelet 2D","text":"There are 2 functions available for the 2D decomposition. The ac2d function is the original implementation and is kept for replication purposes. We generally recommend using the acwt2D function, which is a wrapper around ac2d because it has a better syntax.","category":"page"},{"location":"acw2d/","page":"AC Wavelet 2D","title":"AC Wavelet 2D","text":"ac2d\n\nacwt2D","category":"page"},{"location":"acw2d/#Inverse-AC-Wavelet-Transform","page":"AC Wavelet 2D","title":"Inverse AC Wavelet Transform","text":"","category":"section"},{"location":"acw2d/","page":"AC Wavelet 2D","title":"AC Wavelet 2D","text":"To reconstruct a 2D signal from a 4 dimensional tensor of wavelet coefficients, use the acwt2D function.","category":"page"},{"location":"acw2d/","page":"AC Wavelet 2D","title":"AC Wavelet 2D","text":"iacwt2D","category":"page"},{"location":"getting_started/#Getting-Started","page":"Getting Started","title":"Getting Started","text":"","category":"section"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"In this section we will provide a condensed overview of the package. In order to keep this overview concise, we will not discuss any background information or theory here in detail.","category":"page"},{"location":"getting_started/#Installation","page":"Getting Started","title":"Installation","text":"","category":"section"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"To install AutocorrelationShell.jl, start up Julia and type the following code-snipped into the REPL. It makes use of the native Julia package manger.","category":"page"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"Pkg.add(\"AutocorrelationShell\")","category":"page"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"Additionally, for example if you encounter any sudden issues, or in the case you would like to contribute to the package, you can manually choose to be on the latest (untagged) version.","category":"page"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"Pkg.checkout(\"AutocorrelationShell\")","category":"page"},{"location":"getting_started/#Examples","page":"Getting Started","title":"Examples","text":"","category":"section"},{"location":"getting_started/#D-Autocorrelation-Wavelet-Transform","page":"Getting Started","title":"1D Autocorrelation Wavelet Transform","text":"","category":"section"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"The following code snippet shows how to obtain the autocorrelation wavelet decomposition of a 1D signal.","category":"page"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"using AutocorrelationShell, Wavelets, Plots\n\nH = wavelet(WT.db2)\nL = 2\nQ = qfilter(H)\nP = pfilter(H)\n\nx = zeros(256)\nx[128] = 1\n\ndecomposition = acwt(x, L=2, P=P, Q=Q)\n\nwiggle(decomposition, Overlap = false)","category":"page"},{"location":"getting_started/#D-Autocorrelation-Wavelet-Transform-2","page":"Getting Started","title":"2D Autocorrelation Wavelet Transform","text":"","category":"section"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"acwt2D(x; L_row, L_col, P, Q)","category":"page"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"The acwt2D function performs a forward wavelet transformation on 2D signals such as images. It returns a 4 dimensional tensor with the dimensions (numrow, numcol, levelsofdecomprow, levelsofdecompcol).","category":"page"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"iacwt2D(x)","category":"page"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"The iacwt2D function is the inverse function of acwt2D. It takes the output of acwt2D(i.e. the wavelet coefficient matrix) and reconstructs the original signal.","category":"page"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"The following code snippet shows how to obtain the autocorrelation wavelet decomposition of an image.","category":"page"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"H = wavelet(WT.db2)\nQ = qfilter(H)\nP = pfilter(H)\n\nimg = load(../test/pictures/boat.jpg)\nimg = Float64.(Gray.(img))\n\ndecomposition = acwt2D(img, L_row=2, L_col=2, P=P, Q=Q)\n\n# Display the 6th row and column decomposition\nacwt_heatmap(decomposition[:,:,6,6])\n\n# Revert to original signal\nreconstruct = iacwt2D(decomposition)","category":"page"},{"location":"getting_started/#D-Autocorrelation-Wavelet-Packet-Transform","page":"Getting Started","title":"1D Autocorrelation Wavelet Packet Transform","text":"","category":"section"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"acwpt(x, P, Q)","category":"page"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"The acwpt function computes the autocorrelation wavelet packet transform for 1 dimensional signal. It returns a binary tree object where the root node contains the original signal, and each child node contains a vector of 1 dimensional autocorrelation wavelet transform coefficients.","category":"page"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"The following code snippet shows how to obtain the autocorrelation wavelet packet transformation of a 1D signal.","category":"page"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"using Random, Wavelets, AbstractTrees\nrng = MersenneTwister(123);\n\nX₁ = randn(rng, 4); # length 4 random signal\nH = wavelet(WT.db2);\nQ = qfilter(H);\nP = pfilter(H);\ndecomp = acwpt(X₁, P, Q)\n\n# Print the tree in the console\nprint_tree(decomp)\n\n# Gather all nodes into a vector\ncollect(PostOrderDFS(decomp))","category":"page"},{"location":"getting_started/#Getting-Help","page":"Getting Started","title":"Getting Help","text":"","category":"section"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"To get help on specific functionality you can either look up the information here, or if you prefer you can make use of Julia's native doc-system.","category":"page"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"If you encounter a bug or would like to participate in the development of this package come find us on GitHub.","category":"page"},{"location":"getting_started/","page":"Getting Started","title":"Getting Started","text":"ShozenD/AutocorrelationShell.jl","category":"page"},{"location":"acwpt/","page":"AC Wavelet Packets","title":"AC Wavelet Packets","text":"CurrentModule = AutocorrelationShell\nDocTestSetup = quote\n  using AutocorrelationShell\nend","category":"page"},{"location":"acwpt/#Autocorrelation-Wavelet-Packet-transform","page":"AC Wavelet Packets","title":"Autocorrelation Wavelet Packet transform","text":"","category":"section"},{"location":"acwpt/","page":"AC Wavelet Packets","title":"AC Wavelet Packets","text":"The wavelet packet transform is a wavelet transform where both the approximation and detail coefficients are passed through low and high pass quadrature mirror filters to create a full binary tree. The main distinction between normal wavelet packets and the autocorrelation wavelet packets is that the autocorrelation transform is redundant. Therefore the number of wavelet coefficients will double at each subsequent level of the decomposition tree. To perform the autocorrelation wavelet transform, use the acwpt function.","category":"page"},{"location":"acwpt/","page":"AC Wavelet Packets","title":"AC Wavelet Packets","text":"acwpt","category":"page"},{"location":"acwpt/#AutocorrelationShell.ACTransforms.acwpt","page":"AC Wavelet Packets","title":"AutocorrelationShell.ACTransforms.acwpt","text":"acwpt(x, wt[, L=maxtransformlevels(x)])\n\nPerform a ac wavelet packet transform of the array x. The wavelet type wt determines the transform type.\n\nExamples\n\nacwpt(x, wavelet(WT.db4))\n\nSee also: iacwpt\n\n\n\n\n\n","category":"function"},{"location":"acwpt/","page":"AC Wavelet Packets","title":"AC Wavelet Packets","text":"By design, the original signal is contained in the root node of the binary decomposition tree. However, One can reconstruct the signal from the wavelet coefficents, perhaps after pruning the tree, using the aciwpt function.","category":"page"},{"location":"acwpt/","page":"AC Wavelet Packets","title":"AC Wavelet Packets","text":"iacwpt","category":"page"},{"location":"acwpt/","page":"AC Wavelet Packets","title":"AC Wavelet Packets","text":"For a wavelet packet decomposition, it is interesting to find an optimal decomposition with respect to a convenient criterion. For a more detailed explanation on how an optimal decomposition is chosen for a wavelet packet decomposition, refer to the Choosing the Optimal Decomposition section of the Wavelet Packets documentation on the MathWorks website.","category":"page"},{"location":"acwpt/","page":"AC Wavelet Packets","title":"AC Wavelet Packets","text":"The acwpt_postorder_bb traverses the binary tree in an bottom-up order and is therefore the most democratic way of choosing the optimal wavelet coefficients. On the otherhand, acwpt_preorder_bb will traverse the binary tree in an top-bottom order and is therefore a \"greedy\" way of choosing the optimal wavelet coefficients. The two function will often return a different binary tree for the same decomposition.","category":"page"},{"location":"acwpt/","page":"AC Wavelet Packets","title":"AC Wavelet Packets","text":"We use different entropy methods as our criteria because the describe information-related properties for an accurate representation of a given signal. The entropy methods currently available within our package are, ShannonEntropy, LogEnergyEntropy, and NormEntropy. For a more detailed description of each method, refer to the AC Wavelet Utils documentation.","category":"page"},{"location":"acwpt/","page":"AC Wavelet Packets","title":"AC Wavelet Packets","text":"bestbasistree","category":"page"},{"location":"acwpt/","page":"AC Wavelet Packets","title":"AC Wavelet Packets","text":"A simple visualization of the best basis decomposition can be obtained using the selectednodes_plot function, which highlights the selected nodes on a predefined grid. The autocorrelation wavelet decomposition is redundant, meaning that each node of the decomposition tree will be the same length as the original signal. Therefore the size of each grid cell does not accurately represent the length of the coefficient vector in each node. However, it is sufficient to understand which nodes are selected in the best basis tree.","category":"page"},{"location":"acwpt/","page":"AC Wavelet Packets","title":"AC Wavelet Packets","text":"selectednodes_plot(x::BitArray, nodecolor::Symbol=:red)","category":"page"},{"location":"acw1d/","page":"AC Wavelet 1D","title":"AC Wavelet 1D","text":"CurrentModule = AutocorrelationShell\nDocTestSetup = quote\n  using AutocorrelationShell\nend","category":"page"},{"location":"acw1d/#D-Autocorrelation-Wavelets-Transform","page":"AC Wavelet 1D","title":"1D Autocorrelation Wavelets Transform","text":"","category":"section"},{"location":"acw1d/","page":"AC Wavelet 1D","title":"AC Wavelet 1D","text":"The 1D AC Wavelet transform will take a 1D signal such as a single time series and decompose it into wavelet coefficients.","category":"page"},{"location":"acw1d/#Orthogonal-Filters","page":"AC Wavelet 1D","title":"Orthogonal Filters","text":"","category":"section"},{"location":"acw1d/","page":"AC Wavelet 1D","title":"AC Wavelet 1D","text":"To begin, one must first specify the high pass and low pass autocorrelation filters to use in the decomposition. The types of filters available for use are Haar, Coiflet, Daubechies, Symlet, Battle, Beylkin, Vaidyanathan, and CDF. These filters are implemented within the Wavelets.jl package.","category":"page"},{"location":"acw1d/#Forward-AC-Wavelet-Transform","page":"AC Wavelet 1D","title":"Forward AC Wavelet Transform","text":"","category":"section"},{"location":"acw1d/","page":"AC Wavelet 1D","title":"AC Wavelet 1D","text":"To perform the transform on a signal, use the acwt function.","category":"page"},{"location":"acw1d/","page":"AC Wavelet 1D","title":"AC Wavelet 1D","text":"acwt","category":"page"},{"location":"acw1d/#AutocorrelationShell.ACTransforms.acwt","page":"AC Wavelet 1D","title":"AutocorrelationShell.ACTransforms.acwt","text":"acwt(x, wt[, L=maxtransformlevels(x)])\n\nPerform a forward ac wavelet transform of the array x. This method works for the 2D case as well. The wavelet type wt determines the transform type. Refer to Wavelet.jl for a list of available methods.\n\nExamples\n\nacwt(x, wavelet(WT.db4))\n\nSee also: iacwt\n\n\n\n\n\n","category":"function"},{"location":"acw1d/#Inverse-AC-Wavelet-Transform","page":"AC Wavelet 1D","title":"Inverse AC Wavelet Transform","text":"","category":"section"},{"location":"acw1d/","page":"AC Wavelet 1D","title":"AC Wavelet 1D","text":"To reconstruct the signal from a array of AC Wavelet coefficients, use the iacwt function.","category":"page"},{"location":"acw1d/","page":"AC Wavelet 1D","title":"AC Wavelet 1D","text":"iacwt","category":"page"},{"location":"acw1d/#AutocorrelationShell.ACTransforms.iacwt","page":"AC Wavelet 1D","title":"AutocorrelationShell.ACTransforms.iacwt","text":"iacwt\n\nThe inverse of acwt\n\nSee also: acwt\n\n\n\n\n\n","category":"function"},{"location":"#Introduction","page":"Home","title":"Introduction","text":"","category":"section"},{"location":"#Overview","page":"Home","title":"Overview","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"AutocorrelationShell is package for using autocorrelation wavelets in julia.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Signal representations using autocorrelation wavelets are redundant and non-orthogonal. Some desirable properties of autocorrelation wavelet transforms are symmetry without losing vanishing moments, edge detection and characterization capabilities, and shift invariance. Autocorrelation wavelets can be used as a tool for data analysis such as time series analysis and image analysis.","category":"page"},{"location":"","page":"Home","title":"Home","text":"The Autocorrelation Shell is heavily inspired by the paper Wavelets, their autocorrelation functions, and multiresolution representation of signals.","category":"page"},{"location":"#Installation","page":"Home","title":"Installation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"You can install the package at the Pkg REPL-mode with:","category":"page"},{"location":"","page":"Home","title":"Home","text":"(v1.4) > add AutocorrelationShell","category":"page"},{"location":"#Highlights","page":"Home","title":"Highlights","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"1D autocorrelation wavelet transform.\n2D autocorrelation wavelet transform.\n1D autocorrelation wavelet packet transform.\nA variety of utility functions for image de-noising such as functions for Signal to Noise Ratio(SNR) and Structural Similarity Index(SSIM).\nThe package is completely documented.","category":"page"},{"location":"#Authors","page":"Home","title":"Authors","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"This package was authored by Rishi Subramanian, Christina Chang, and Shozen Dan under the supervision of Professor Naoki Saito at University of California, Davis.","category":"page"}]
}
